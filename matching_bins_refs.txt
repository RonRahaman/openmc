src/cmfd_data.F90:                            matching_bins
src/cmfd_data.F90:                matching_bins(1:t%n_filters) = 1
src/cmfd_data.F90:                matching_bins(i_filter_mesh) = mesh_indices_to_bin(m,ijk)
src/cmfd_data.F90:                  matching_bins(i_filter_ein) = ng - h + 1
src/cmfd_data.F90:                score_index = sum((matching_bins(1:t%n_filters) - 1) * t%stride) + 1
src/cmfd_data.F90:                  matching_bins(1:t%n_filters) = 1
src/cmfd_data.F90:                  matching_bins(i_filter_mesh) = mesh_indices_to_bin(m,ijk)
src/cmfd_data.F90:                    matching_bins(i_filter_ein) = ng - h + 1
src/cmfd_data.F90:                    matching_bins(i_filter_eout) = ng - g + 1
src/cmfd_data.F90:                  score_index = sum((matching_bins(1:t%n_filters) - 1) * t%stride) + 1
src/cmfd_data.F90:                matching_bins(1:t%n_filters) = 1
src/cmfd_data.F90:                  matching_bins(i_filter_ein) = ng - h + 1
src/cmfd_data.F90:                matching_bins(i_filter_mesh) = mesh_indices_to_bin(m, &
src/cmfd_data.F90:                matching_bins(i_filter_surf) = IN_RIGHT
src/cmfd_data.F90:                score_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1 ! outgoing
src/cmfd_data.F90:                matching_bins(i_filter_surf) = OUT_RIGHT
src/cmfd_data.F90:                score_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1 ! incoming
src/cmfd_data.F90:                matching_bins(i_filter_mesh) = mesh_indices_to_bin(m, &
src/cmfd_data.F90:                matching_bins(i_filter_surf) = IN_RIGHT
src/cmfd_data.F90:                score_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1 ! incoming
src/cmfd_data.F90:                matching_bins(i_filter_surf) = OUT_RIGHT
src/cmfd_data.F90:                score_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1 ! outgoing
src/cmfd_data.F90:                matching_bins(i_filter_mesh) = mesh_indices_to_bin(m, &
src/cmfd_data.F90:                matching_bins(i_filter_surf) = IN_FRONT
src/cmfd_data.F90:                score_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1 ! outgoing
src/cmfd_data.F90:                matching_bins(i_filter_surf) = OUT_FRONT
src/cmfd_data.F90:                score_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1 ! incoming
src/cmfd_data.F90:                matching_bins(i_filter_mesh) = mesh_indices_to_bin(m, &
src/cmfd_data.F90:                matching_bins(i_filter_surf) = IN_FRONT
src/cmfd_data.F90:                score_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1 ! incoming
src/cmfd_data.F90:                matching_bins(i_filter_surf) = OUT_FRONT
src/cmfd_data.F90:                score_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1 ! outgoing
src/cmfd_data.F90:                matching_bins(i_filter_mesh) = mesh_indices_to_bin(m, &
src/cmfd_data.F90:                matching_bins(i_filter_surf) = IN_TOP
src/cmfd_data.F90:                score_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1 ! outgoing
src/cmfd_data.F90:                matching_bins(i_filter_surf) = OUT_TOP
src/cmfd_data.F90:                score_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1 ! incoming
src/cmfd_data.F90:                matching_bins(i_filter_mesh) = mesh_indices_to_bin(m, &
src/cmfd_data.F90:                matching_bins(i_filter_surf) = IN_TOP
src/cmfd_data.F90:                score_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1 ! incoming
src/cmfd_data.F90:                matching_bins(i_filter_surf) = OUT_TOP
src/cmfd_data.F90:                score_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1 ! outgoing
src/global.F90:  integer, allocatable :: matching_bins(:)
src/global.F90:!$omp&              trace, thread_id, current_work, matching_bins)
src/global.F90:    if (allocated(matching_bins)) deallocate(matching_bins)
src/initialize.F90:      ! Allocate and setup tally stride, matching_bins, and tally maps
src/output.F90:      matching_bins(1:t%n_filters) = 0
src/output.F90:          matching_bins(j) = matching_bins(j) + 1
src/output.F90:          if (matching_bins(j) > t % filters(j) % n_bins) then
src/output.F90:            matching_bins(j) = 0
src/output.F90:          filter_index = sum((max(matching_bins(1:t%n_filters),1) - 1) * t % stride) + 1
src/output.F90:    matching_bins(1:t%n_filters) = 1
src/output.F90:              matching_bins(i_filter_ein) = l
src/output.F90:            matching_bins(i_filter_mesh) = &
src/output.F90:            matching_bins(i_filter_surf) = IN_RIGHT
src/output.F90:            filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/output.F90:            matching_bins(i_filter_surf) = OUT_RIGHT
src/output.F90:            filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/output.F90:            matching_bins(i_filter_mesh) = &
src/output.F90:            matching_bins(i_filter_surf) = IN_RIGHT
src/output.F90:            filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/output.F90:            matching_bins(i_filter_surf) = OUT_RIGHT
src/output.F90:            filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/output.F90:            matching_bins(i_filter_mesh) = &
src/output.F90:            matching_bins(i_filter_surf) = IN_FRONT
src/output.F90:            filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/output.F90:            matching_bins(i_filter_surf) = OUT_FRONT
src/output.F90:            filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/output.F90:            matching_bins(i_filter_mesh) = &
src/output.F90:            matching_bins(i_filter_surf) = IN_FRONT
src/output.F90:            filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/output.F90:            matching_bins(i_filter_surf) = OUT_FRONT
src/output.F90:            filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/output.F90:            matching_bins(i_filter_mesh) = &
src/output.F90:            matching_bins(i_filter_surf) = IN_TOP
src/output.F90:            filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/output.F90:            matching_bins(i_filter_surf) = OUT_TOP
src/output.F90:            filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/output.F90:            matching_bins(i_filter_mesh) = &
src/output.F90:            matching_bins(i_filter_surf) = IN_TOP
src/output.F90:            filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/output.F90:            matching_bins(i_filter_surf) = OUT_TOP
src/output.F90:            filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/output.F90:    bin = matching_bins(i_filter)
src/tally.F90:      filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/tally.F90:    bin_energyout = matching_bins(i)
src/tally.F90:      matching_bins(i) = binary_search(t % filters(i) % real_bins, n, E_out)
src/tally.F90:      i_filter = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/tally.F90:    matching_bins(i) = bin_energyout
src/tally.F90:      filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/tally.F90:    matching_bins(1:t%n_filters) = 1
src/tally.F90:        matching_bins(i) = get_next_bin(p, FILTER_UNIVERSE, &
src/tally.F90:        matching_bins(i) = get_next_bin(p, FILTER_MATERIAL, &
src/tally.F90:          matching_bins(i) = get_next_bin(p, FILTER_CELL, &
src/tally.F90:          if (matching_bins(i) /= NO_BIN_FOUND) exit
src/tally.F90:        matching_bins(i) = get_next_bin(p, FILTER_CELLBORN, &
src/tally.F90:        matching_bins(i) = get_next_bin(p, FILTER_SURFACE, &
src/tally.F90:          matching_bins(i) = NO_BIN_FOUND
src/tally.F90:          matching_bins(i) = binary_search(t % filters(i) % real_bins, &
src/tally.F90:      if (matching_bins(i) == NO_BIN_FOUND) return
src/tally.F90:        matching_bins(i_filter_mesh) = mesh_indices_to_bin(m, ijk_cross)
src/tally.F90:        filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/tally.F90:    matching_bins(1:t%n_filters) = 1
src/tally.F90:        call get_mesh_bin(m, p % coord0 % xyz, matching_bins(i))
src/tally.F90:        matching_bins(i) = get_next_bin(p, FILTER_UNIVERSE, &
src/tally.F90:        matching_bins(i) = get_next_bin(p, FILTER_MATERIAL, &
src/tally.F90:          matching_bins(i) = get_next_bin(p, FILTER_CELL, &
src/tally.F90:          if (matching_bins(i) /= NO_BIN_FOUND) exit
src/tally.F90:        matching_bins(i) = get_next_bin(p, FILTER_CELLBORN, &
src/tally.F90:        matching_bins(i) = get_next_bin(p, FILTER_SURFACE, &
src/tally.F90:          matching_bins(i) = NO_BIN_FOUND
src/tally.F90:          matching_bins(i) = binary_search(t % filters(i) % real_bins, &
src/tally.F90:          matching_bins(i) = NO_BIN_FOUND
src/tally.F90:          matching_bins(i) = binary_search(t % filters(i) % real_bins, &
src/tally.F90:      if (matching_bins(i) == NO_BIN_FOUND) then
src/tally.F90:        matching_bins(j) = binary_search(t % filters(j) % real_bins, &
src/tally.F90:              matching_bins(i_filter_surf) = OUT_TOP
src/tally.F90:              matching_bins(i_filter_mesh) = &
src/tally.F90:              filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/tally.F90:              matching_bins(i_filter_surf) = IN_TOP
src/tally.F90:              matching_bins(i_filter_mesh) = &
src/tally.F90:              filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/tally.F90:              matching_bins(i_filter_surf) = OUT_FRONT
src/tally.F90:              matching_bins(i_filter_mesh) = &
src/tally.F90:              filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/tally.F90:              matching_bins(i_filter_surf) = IN_FRONT
src/tally.F90:              matching_bins(i_filter_mesh) = &
src/tally.F90:              filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/tally.F90:              matching_bins(i_filter_surf) = OUT_RIGHT
src/tally.F90:              matching_bins(i_filter_mesh) = &
src/tally.F90:              filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/tally.F90:              matching_bins(i_filter_surf) = IN_RIGHT
src/tally.F90:              matching_bins(i_filter_mesh) = &
src/tally.F90:              filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/tally.F90:        matching_bins(i_filter_surf) = 0
src/tally.F90:              matching_bins(i_filter_surf) = OUT_RIGHT
src/tally.F90:              matching_bins(i_filter_mesh) = &
src/tally.F90:              matching_bins(i_filter_surf) = IN_RIGHT
src/tally.F90:              matching_bins(i_filter_mesh) = &
src/tally.F90:              matching_bins(i_filter_surf) = OUT_FRONT
src/tally.F90:              matching_bins(i_filter_mesh) = &
src/tally.F90:              matching_bins(i_filter_surf) = IN_FRONT
src/tally.F90:              matching_bins(i_filter_mesh) = &
src/tally.F90:              matching_bins(i_filter_surf) = OUT_TOP
src/tally.F90:              matching_bins(i_filter_mesh) = &
src/tally.F90:              matching_bins(i_filter_surf) = IN_TOP
src/tally.F90:              matching_bins(i_filter_mesh) = &
src/tally.F90:        if (matching_bins(i_filter_surf) > 0) then
src/tally.F90:          filter_index = sum((matching_bins(1:t%n_filters) - 1) * t % stride) + 1
src/tally_initialize.F90:! TallyObject derived type, including stride, matching_bins, and results.
src/tally_initialize.F90:      ! Allocate stride and matching_bins arrays
src/tally_initialize.F90:    allocate(matching_bins(max_n_filters))
